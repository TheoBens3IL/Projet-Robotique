// Generated by gencpp from file pp_msgs/MotionPlanningPluginRequest.msg
// DO NOT EDIT!


#ifndef PP_MSGS_MESSAGE_MOTIONPLANNINGPLUGINREQUEST_H
#define PP_MSGS_MESSAGE_MOTIONPLANNINGPLUGINREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pp_msgs
{
template <class ContainerAllocator>
struct MotionPlanningPluginRequest_
{
  typedef MotionPlanningPluginRequest_<ContainerAllocator> Type;

  MotionPlanningPluginRequest_()
    : costmap_ros()
    , width(0)
    , height(0)
    , start(0)
    , goal(0)
    , resolution(0.0)
    , origin()  {
    }
  MotionPlanningPluginRequest_(const ContainerAllocator& _alloc)
    : costmap_ros(_alloc)
    , width(0)
    , height(0)
    , start(0)
    , goal(0)
    , resolution(0.0)
    , origin(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _costmap_ros_type;
  _costmap_ros_type costmap_ros;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _start_type;
  _start_type start;

   typedef int32_t _goal_type;
  _goal_type goal;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _origin_type;
  _origin_type origin;





  typedef boost::shared_ptr< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotionPlanningPluginRequest_

typedef ::pp_msgs::MotionPlanningPluginRequest_<std::allocator<void> > MotionPlanningPluginRequest;

typedef boost::shared_ptr< ::pp_msgs::MotionPlanningPluginRequest > MotionPlanningPluginRequestPtr;
typedef boost::shared_ptr< ::pp_msgs::MotionPlanningPluginRequest const> MotionPlanningPluginRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator1> & lhs, const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator2> & rhs)
{
  return lhs.costmap_ros == rhs.costmap_ros &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.resolution == rhs.resolution &&
    lhs.origin == rhs.origin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator1> & lhs, const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "710f6e11c9e7009223854e94fce6ad46";
  }

  static const char* value(const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x710f6e11c9e70092ULL;
  static const uint64_t static_value2 = 0x23854e94fce6ad46ULL;
};

template<class ContainerAllocator>
struct DataType< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pp_msgs/MotionPlanningPluginRequest";
  }

  static const char* value(const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MotionPlanningPlugin.srv\n"
"int32[] costmap_ros\n"
"int32 width\n"
"int32 height\n"
"int32 start\n"
"int32 goal\n"
"float32 resolution\n"
"float32[] origin  # [x,y,z]\n"
;
  }

  static const char* value(const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.costmap_ros);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.resolution);
      stream.next(m.origin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionPlanningPluginRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pp_msgs::MotionPlanningPluginRequest_<ContainerAllocator>& v)
  {
    s << indent << "costmap_ros[]" << std::endl;
    for (size_t i = 0; i < v.costmap_ros.size(); ++i)
    {
      s << indent << "  costmap_ros[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.costmap_ros[i]);
    }
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "start: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "origin[]" << std::endl;
    for (size_t i = 0; i < v.origin.size(); ++i)
    {
      s << indent << "  origin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.origin[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PP_MSGS_MESSAGE_MOTIONPLANNINGPLUGINREQUEST_H
