# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pp_msgs/MotionPlanningPluginRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotionPlanningPluginRequest(genpy.Message):
  _md5sum = "710f6e11c9e7009223854e94fce6ad46"
  _type = "pp_msgs/MotionPlanningPluginRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MotionPlanningPlugin.srv
int32[] costmap_ros
int32 width
int32 height
int32 start
int32 goal
float32 resolution
float32[] origin  # [x,y,z]
"""
  __slots__ = ['costmap_ros','width','height','start','goal','resolution','origin']
  _slot_types = ['int32[]','int32','int32','int32','int32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       costmap_ros,width,height,start,goal,resolution,origin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionPlanningPluginRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.costmap_ros is None:
        self.costmap_ros = []
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.start is None:
        self.start = 0
      if self.goal is None:
        self.goal = 0
      if self.resolution is None:
        self.resolution = 0.
      if self.origin is None:
        self.origin = []
    else:
      self.costmap_ros = []
      self.width = 0
      self.height = 0
      self.start = 0
      self.goal = 0
      self.resolution = 0.
      self.origin = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.costmap_ros)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.costmap_ros))
      _x = self
      buff.write(_get_struct_4if().pack(_x.width, _x.height, _x.start, _x.goal, _x.resolution))
      length = len(self.origin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.origin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.costmap_ros = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.width, _x.height, _x.start, _x.goal, _x.resolution,) = _get_struct_4if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.origin = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.costmap_ros)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.costmap_ros.tostring())
      _x = self
      buff.write(_get_struct_4if().pack(_x.width, _x.height, _x.start, _x.goal, _x.resolution))
      length = len(self.origin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.origin.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.costmap_ros = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.width, _x.height, _x.start, _x.goal, _x.resolution,) = _get_struct_4if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.origin = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4if = None
def _get_struct_4if():
    global _struct_4if
    if _struct_4if is None:
        _struct_4if = struct.Struct("<4if")
    return _struct_4if
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pp_msgs/MotionPlanningPluginResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotionPlanningPluginResponse(genpy.Message):
  _md5sum = "d00db495743883c1d9a4cf3d0844ceac"
  _type = "pp_msgs/MotionPlanningPluginResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[] plan
"""
  __slots__ = ['plan']
  _slot_types = ['int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionPlanningPluginResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.plan is None:
        self.plan = []
    else:
      self.plan = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.plan)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.plan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plan = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.plan)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.plan.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plan = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class MotionPlanningPlugin(object):
  _type          = 'pp_msgs/MotionPlanningPlugin'
  _md5sum = '1fb7f778734b213306e1e32481d2f6bf'
  _request_class  = MotionPlanningPluginRequest
  _response_class = MotionPlanningPluginResponse
